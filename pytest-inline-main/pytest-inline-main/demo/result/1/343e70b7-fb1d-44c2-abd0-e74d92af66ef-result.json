{"name": "timeout-expected-to-fail", "status": "broken", "statusDetails": {"message": "AttributeError: module 'signal' has no attribute 'SIGALRM'. Did you mean: 'SIGABRT'?", "trace": "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x0000018021C53490>\nwhen = 'call'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'pytest_runtest_call'>, args = ()\nkwargs = {'item': <InlinetestItem timeout-expected-to-fail>}\nargname = 'item', firstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_pytest.config.PytestPluginManager object at 0x000001801EFA18A0>\nhook_name = 'pytest_runtest_call'\nmethods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from 'C:\\\\Users\\\\cmy\\\\AppData\\\\Local\\\\Programs\\\\Pytho...\\\\Users\\\\cmy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\_pytest\\\\unraisableexception.py'>>, ...]\nkwargs = {'item': <InlinetestItem timeout-expected-to-fail>}\nfirstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from 'C:\\\\Users\\\\cmy\\\\AppData\\\\Local\\\\Programs\\\\Pytho...\\\\Users\\\\cmy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\_pytest\\\\unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <InlinetestItem timeout-expected-to-fail>}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x0000018021D55690>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from 'C:\\\\Users\\\\cmy\\\\AppData\\\\Local\\\\Programs\\\\Pytho...\\\\Users\\\\cmy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\_pytest\\\\unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <InlinetestItem timeout-expected-to-fail>}\nfirstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <InlinetestItem timeout-expected-to-fail>\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n            item.runtest()\n        except Exception as e:\n            # Store trace info to allow postmortem debugging\n            sys.last_type = type(e)\n            sys.last_value = e\n            assert e.__traceback__ is not None\n            # Skip *this* frame\n            sys.last_traceback = e.__traceback__.tb_next\n>           raise e\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\runner.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <InlinetestItem timeout-expected-to-fail>\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <InlinetestItem timeout-expected-to-fail>\n\n    def runtest(self) -> None:\n        assert self.dtest is not None\n        assert self.runner is not None\n        for round_index in range(1, self.dtest.repeated + 1):\n            failures: List[str] = []\n>           self.runner.run(copy.copy(self.dtest), failures)\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\inline\\plugin.py:1348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <inline.plugin.InlineTestRunner object at 0x0000018021C72080>\ntest = inline test timeout-expected-to-fail, starting at line 42\nout = []\n\n    def run(self, test: InlineTest, out: List) -> None:\n        tree = ast.parse(test.to_test())\n        codeobj = compile(tree, filename=\"<ast>\", mode=\"exec\")\n        start_time = time.time()\n        if test.timeout > 0:\n>           with timeout(seconds=test.timeout):\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\inline\\plugin.py:1295: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <inline.plugin.timeout object at 0x0000018021D557E0>\n\n    def __enter__(self):\n>       signal.signal(signal.SIGALRM, self.handle_timeout)\nE       AttributeError: module 'signal' has no attribute 'SIGALRM'. Did you mean: 'SIGABRT'?\n\nC:\\Users\\cmy\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\inline\\plugin.py:1462: AttributeError"}, "start": 1700330074649, "stop": 1700330074649, "uuid": "549101d6-900c-4046-a4fe-7dec6d094a6b", "historyId": "e08bcc89889d3c56043fa39efef3cf93", "testCaseId": "e08bcc89889d3c56043fa39efef3cf93", "fullName": "demo.features#timeout-expected-to-fail", "labels": [{"name": "tag", "value": "inline"}, {"name": "parentSuite", "value": "demo"}, {"name": "suite", "value": "features"}, {"name": "host", "value": "LAPTOP-J67UEDPK"}, {"name": "thread", "value": "12456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "demo.features"}]}